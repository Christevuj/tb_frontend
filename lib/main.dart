import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'firebase_options.dart'; // Generated by `flutterfire configure`
import 'login_screens/splash_page_model.dart';
import 'package:tb_frontend/ollama_service.dart'; // Your Ollama service
import 'screens/tb_dots_map_view.dart';
import 'services/presence_service.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Load environment variables
  await dotenv.load(fileName: ".env");

  // Initialize Firebase
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Start Ollama service
  final ollamaService = OllamaService();
  ollamaService.start();

  // Optional: Check if Ollama is ready by sending a quick ping
  try {
    await for (final _ in ollamaService.streamMessage("Hello")) {
      print('✅ Ollama service is ready!');
      break; // Exit after first response
    }
  } catch (e) {
    print('⚠️ Ollama service is not ready: $e');
  }

  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
  final PresenceService _presenceService = PresenceService();

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    // Initialize presence service
    _presenceService.initialize();
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _presenceService.dispose();
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    switch (state) {
      case AppLifecycleState.resumed:
        // App is in foreground and active
        _presenceService.markAsActive();
        break;
      case AppLifecycleState.paused:
      case AppLifecycleState.inactive:
      case AppLifecycleState.detached:
        // App is in background or inactive
        _presenceService.markAsInactive();
        break;
      case AppLifecycleState.hidden:
        // App is hidden but may still be running
        _presenceService.markAsInactive();
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'TBisita App',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: const Color(0xFFFF4C72)),
        useMaterial3: true,
      ),

      // ✅ Instead of only `home`, we now use `initialRoute` + `routes`
      initialRoute: '/',
      routes: {
        '/': (context) => const TbisitaSplashPage(), // splash screen first
        '/map': (context) =>
            const TBDotsFacilitiesMap(), // TB DOTS facilities map
      },
    );
  }
}
